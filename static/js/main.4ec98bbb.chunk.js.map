{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","food","search","sby","cart","page","handelItem","id","v","res","c","setState","toggleSort","cu","togglePage","axios","get","then","result","data","forEach","el","index","catch","alert","navbar","className","type","value","this","onChange","event","target","onClick","price","f","x","t","itemname","push","length","Fragment","items","time","Date","getHours","getMinutes","toString","getTime","heading","getHeading","ditems","sitems","by","sort","a","b","sortItems","filter","i","t1","t2","t3","t4","availabletime","split","verify","includes","map","bts","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ec98bbb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nconst url='https://s3-ap-southeast-1.amazonaws.com/he-public-data/smartQFood8bef5a2.json';\n\nconst getTime = () =>{\n    let time=new Date();\n    time=time.getHours()+':'+time.getMinutes();\n    time=time.toString();\n    return time\n}\nconst verify = (i,time) =>{\n  // return 1\n    let t1,t2,t3,t4,t;\n    t=i.availabletime;\n    t=t.split(',')\n    t1=t[0].split('-')\n    t2=t1[1];   t1=t1[0];\n    // console.log(t2)\n\n    t3=t[1].split('-')\n    t4=t3[1];   t3=t3[0];\n    // console.log(t4)\n\n    return (t1<=time && time<=t2) || (t3<=time && time<=t4) ;\n}\nconst getHeading= (time) =>{\n  if(time <= \"11\" && time >= '7') return \"Lunch\"\n  if(time <= \"23\" && time >= '17') return \"Dinner\"\n  return  \"None\"\n}\nconst sortItems=(sitems,by)=>{\n  if(by===0)\n  return sitems.sort(\n    (a,b) =>  a.price-b.price\n  );\n  else \n  return sitems.sort(\n    (a,b) =>  b.price-a.price\n  );\n}\n\nclass App extends React.Component {\n  state={\n    food:[ ],\n    search:'',\n    sby:0,\n    cart:[],\n    page:0,\n  }\n  handelItem=(id,v)=>{\n    let res=this.state.food;\n    let c=res[id];\n    c={...c,cart:c.cart+v}\n    res[id]=c;\n    this.setState({food:res})\n  }\n  componentDidMount(){\n    axios.get(url).then(res => { \n      let result=[];\n      res.data.forEach((el,index) => {\n        result=[...result,{...el,id:index,cart:0}]\n      });\n      // console.log(result)\n      this.setState( {food : result}) \n    })\n    .catch(()=> alert(\"UNABLE TO FETCH data\"))\n  }\n\n  toggleSort = () => {\n    let cu=this.state.sby;\n    cu=cu^1;\n    this.setState({  sby : cu,  })\n  };\n\n  togglePage = () => {\n    let cu=this.state.page;\n    cu=cu^1;\n    this.setState({  page : cu,  })\n  };\n  render(){\n    let navbar=<div className=\"Nav\">\n    <input type='text' className=\"In\" value={this.state.search}\n     onChange={\n       (event) => this.setState({\n         search : event.target.value,\n       })\n     }\n    />\n    {/* <svg aria-hidden=\"true\" width=\"12\" height=\"12\" viewBox=\"0 0 36 36\"><path d=\"M2 26h32L18 11\"></path></svg> */}\n      \n    <div className='button' onClick={this.toggleSort}>Sort {!this.state.sby?\n        \"↓\":\"↑\"}</div>\n    <div className='button' onClick={this.togglePage}>{!this.state.page?\"Check Out\":\"Home\"}</div>\n </div>;\n   const {food,page} =this.state\n   if(page===1){\n      let cart=[];  let price=0;\n      food.forEach(f=>{\n        if(f.cart>0){ \n          let x;\n          let t=f.cart*f.price;\n          x=<div className='rec'>\n            <p>{f.itemname}</p>\n            <p className='buts'>\n              <div className='button' onClick={()=>this.handelItem(f.id,-1)}>-</div>\n              &nbsp;&nbsp;&nbsp;{f.cart}&nbsp;&nbsp; \n              <div className='button' onClick={()=>this.handelItem(f.id,1)}>+</div>\n            </p>\n            <div className = 'det'>{f.cart} x Rs{f.price}</div>\n            <div className = 'tot'>Rs {t}</div>\n            <hr/>\n          </div>;\n          cart.push(x);\n          price+=t;\n        }\n      })\n      if(cart.length===0)\n      return(<React.Fragment>\n          {navbar}\n          <h2>Cart is Empty</h2>\n          </React.Fragment>)\n      return(\n        <React.Fragment>\n          {navbar}\n          <h3 >Your Order Details</h3>\n          {cart}\n          <p className=\"x\">Total : {price}Rs</p>\n          <div className='button xbtn' onClick={\n            ()=>{alert(\"order placed\")}\n          }>\n            Confirm\n          </div>\n          <br/><br/><br/><br/>\n        </React.Fragment>\n      )\n    }\n    let items=this.state.food\n    let time=getTime(); \n    let th=new Date().getHours();\n    let heading=  getHeading(th);\n    // console.log(this.state.search)\n    const sitems=items.filter((i) => {\n      return (verify(i,time) && i.itemname.includes(this.state.search))\n    })\n    \n    const pitems=sortItems(sitems,this.state.sby)\n   \n    const ditems=pitems.map((i)=>{\n      let bts;\n      if(i.cart===0){\n        bts = <div className='button' onClick={()=>this.handelItem(i.id,1)}>Add</div>\n      }\n      else{\n        bts = <div>\n                <div className='button' onClick={()=>this.handelItem(i.id,-1)}>-</div>\n                &nbsp;&nbsp;&nbsp;{\" \"+i.cart+\"     \"} &nbsp;&nbsp;&nbsp;\n                <div className='button' onClick={()=>this.handelItem(i.id,1)}>+</div>\n              </div>\n      }\n      return(\n        <div key={i.id}>\n          <p className = 'nm'>  {i.itemname} </p>\n          <p className = 'pr'> Rs.{i.price} </p>\n          <br></br>\n          {bts}\n        </div>)\n    });\n    \n    return (\n      <React.Fragment>\n        {navbar}\n        <h2>{heading}</h2>\n        <div className=\"App\">\n          {items.length ? ditems : `NO items`}\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}