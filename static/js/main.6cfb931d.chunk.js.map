{"version":3,"sources":["Spinner.js","config.js","App.js","Utils.js","serviceWorker.js","index.js"],"names":["Spinner","style","position","margin","left","type","color","height","width","options","bottom","right","time","mixColor","backgroundColor","buttonColorDark","buttonColorLight","saveInCookies","label","autoMatchOsTheme","App","state","food","search","sby","cart","page","loading","handelItem","id","v","res","c","setState","toggleSort","cu","togglePage","axios","get","then","result","data","forEach","el","index","console","log","catch","alert","this","navbar","className","value","onChange","event","target","onClick","price","f","x","t","itemname","push","length","items","ditems","Date","min","getMinutes","toString","getHours","getTime","sitems","by","sort","a","b","sortItems","filter","i","includes","map","bts","key","Darkmode","showWidget","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6cfb931d.chunk.js","sourcesContent":["import React from 'react';\nimport Loader from 'react-loader-spinner';\n\nconst Spinner= () => {\n    return(\n        <div style={{position:\"absolute\",  margin : \"380px\", left:\"300px\", }}>\n          <Loader type=\"ThreeDots\" color=\" #55c57a\"\n             height={80} width={80} />\n        </div>\n      );\n}\n\nexport default Spinner;","export const url='https://s3-ap-southeast-1.amazonaws.com/he-public-data/smartQFood8bef5a2.json';\nexport const options = {\n  bottom: '20px', // default: '32px'\n  right: '32px', // default: '32px'\n  left: 'unset', // default: 'unset'\n  time: '0.5s', // default: '0.3s'\n  mixColor: '#fff', // default: '#fff'\n  backgroundColor: '#fff',  // default: '#fff'\n  buttonColorDark: '#100f2c',  // default: '#100f2c'\n  buttonColorLight: '#fff', // default: '#fff'\n  saveInCookies: false, // default: true,\n  label: 'ðŸŒ“', // default: ''\n  autoMatchOsTheme: true // default: true\n}","import React from 'react';\nimport './App.css';\nimport Darkmode from 'darkmode-js';\nimport axios from 'axios';\nimport Spinner from './Spinner';\nimport {url,options}  from './config';\nimport {Verify,getTime} from './Utils';\n\n\nconst getHeading= () =>{\n  // time=\"19\"\n  return \"Food Time\"\n  let time=new Date().getHours();\n  time=time.toString();\n  if(time.length<2) time=\"0\"+time;\n  console.log(time)\n  if(time <= \"11\" && time >= \"07\") return \"Lunch\"\n  else if(time <= \"23\" && time >= \"17\") return \"Dinner\"\n  else return \" No Items at this time \"\n}\nconst sortItems=(sitems,by)=>{\n  if(by===0)\n  return sitems.sort(\n    (a,b) =>  a.price-b.price\n  );\n  else \n  return sitems.sort(\n    (a,b) =>  b.price-a.price\n  );\n}\n\nclass App extends React.Component {\n  state={\n    food:[ ],\n    search:'',\n    sby:0,\n    cart:[],\n    page:0,\n    loading:true,\n  }\n  handelItem=(id,v)=>{\n    let res=this.state.food;\n    let c=res[id];\n    c={...c,cart:c.cart+v}\n    res[id]=c;\n    this.setState({food:res})\n  }\n  \n\n  componentDidMount(){\n    axios.get(url).then(res => { \n      let result=[];\n      res.data.forEach((el,index) => {\n        result=[...result,{...el,id:index,cart:0}]\n      });\n      console.log(result);\n      this.setState( {food : result}) \n      this.setState( {loading  : false}) \n    })\n    .catch(()=> {\n      alert(\"UNABLE TO FETCH data\")\n      this.setState( {loading  : false})\n    })\n  }\n\n  toggleSort = () => {\n    let cu=this.state.sby;\n    cu=cu^1;\n    this.setState({  sby : cu,  })\n  };\n\n  togglePage = () => {\n    let cu=this.state.page;\n    cu=cu^1;\n    this.setState({  page : cu,  })\n  };\n  \n  render(){\n    // const classes=useStyles();\n    if(this.state.loading){\n      return(\n        <Spinner/>\n      );\n    }\n   \n    let navbar=<div className=\"Nav\">\n    <input type='text' className=\"In\" value={this.state.search}\n     onChange={\n       (event) => this.setState({\n         search : event.target.value,\n       })\n     }\n    />\n      \n    <div className='button Sort' onClick={this.toggleSort}>Sort {!this.state.sby?\n        \"â†“\":\"â†‘\"}</div>\n    <div className='button Sort' onClick={this.togglePage}>{!this.state.page?\"Check Out\":\"Home\"}</div>\n </div>;\n   const {food,page} =this.state\n   if(page===1){\n      let cart=[];  let price=0;\n      food.forEach(f=>{\n        if(f.cart>0){ \n          let x;\n          let t=f.cart*f.price;\n          x=<div className='rec'>\n            <p>{f.itemname}</p>\n            <p className='buts'>\n              <div className='button' onClick={()=>this.handelItem(f.id,-1)}>-</div>\n              &nbsp;&nbsp;&nbsp;{f.cart}&nbsp;&nbsp; \n              <div className='button' onClick={()=>this.handelItem(f.id,1)}>+</div>\n            </p>\n            <div className = 'det'>{f.cart} x Rs{f.price}</div>\n            <div className = 'tot'>Rs {t}</div>\n            <hr/>\n          </div>;\n          cart.push(x);\n          price+=t;\n        }\n      })\n      if(cart.length===0)\n      return(\n        <div id='main'>\n          {navbar}\n          <h2>Cart is Empty</h2>\n          </div>)\n      return(\n        <div id='main'>\n          {navbar}\n          <h3 id='heading'>Your Order Details</h3>\n          {/* <div id='cart'> */}\n              {cart}\n          {/* </div> */}\n          <p className=\"x\">Total : {price}Rs</p>\n          <div className='button xbtn' onClick={\n            ()=>{alert(\"order placed\")}\n          }>\n            Confirm\n          </div>\n          <br/><br/><br/><br/>\n          </div>\n      )\n    }\n    let items=this.state.food\n    let time=getTime(); \n    // console.log(this.state.search)\n    const sitems=items.filter((i) => {\n      return (Verify(i,time) && i.itemname.includes(this.state.search))\n    })\n    \n    const pitems=sortItems(sitems,this.state.sby)\n   \n    const ditems=pitems.map((i)=>{\n      let bts;\n      if(i.cart===0){\n        bts = <div className='button' onClick={()=>this.handelItem(i.id,1)}>Add</div>\n      }\n      else{\n        bts = <div>\n                <div className='button' onClick={()=>this.handelItem(i.id,-1)}>-</div>\n                &nbsp;&nbsp;&nbsp;{\" \"+i.cart+\"     \"} &nbsp;&nbsp;&nbsp;\n                <div className='button' onClick={()=>this.handelItem(i.id,1)}>+</div>\n              </div>\n      }\n      return(\n        <div key={i.id}>\n          <p className = 'nm'>  {i.itemname} </p>\n          <p className = 'pr'> Rs.{i.price} </p>\n          <br></br>\n          {bts}\n        </div>)\n    });\n    \n    return (\n      <div id='main'>\n        {navbar}\n        <h2 id='heading'>{getHeading()}</h2>\n        <div className=\"App\">\n          {items.length>0 ? ditems : \"NO items\"}\n        </div>\n        {new Darkmode(options).showWidget()}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","export function Verify (i,time){\n  return 1\n  // time=\"19:00\"\n    let t1,t2,t3,t4,t;\n    // if(time.length===4)  time='0'+time;\n    // console.log(\"time\",time);\n    t=i.availabletime;\n    t=t.split(',')\n    t1=t[0].split('-')\n    t2=t1[1];   t1=t1[0];\n\n    if(t1.length===4)  t1='0'+t1;\n    if(t2.length===4)  t2='0'+t2;\n    // console.log(t1,t2)\n\n    t3=t[1].split('-')\n    t4=t3[1];   t3=t3[0];\n    if(t3.length===4)  t3='0'+t3;\n    if(t4.length===4)  t4='0'+t4;\n    // console.log(t3,t4)\n\n    return (t1<=time && time<=t2) || (t3<=time && time<=t4) ;\n}\nexport function getTime(){\n    let time=new Date();\n    let min=time.getMinutes().toString();\n    // console.log(min.length)\n\n    if(min.length !== 2)   min='0'+min;\n\n    time=time.getHours().toString()+':'+min;\n    if(time.length===4)  time='0'+time;\n    // time=time.toString();\n    // console.log(time);\n    return time\n}\n//   export default Verify;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<PrimarySearchAppBar />, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}